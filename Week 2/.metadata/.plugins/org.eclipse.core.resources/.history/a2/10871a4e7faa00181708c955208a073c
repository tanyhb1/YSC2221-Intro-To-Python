'''
Full Name: TAN YAO HONG, BRYAN
Matric No.: A0171585X
Email: bryantanyh@u.yale-nus.edu.sg
'''
from random import randint, uniform
from math import sqrt

#Complete Q1a below
def nChooseK(n,k):
    x, y, z = 1, 1, 1
    for i in range(1, n+1):
        x *= i
    for i in range(1, k+1):
        y *= i
    for i in range(1, (n-k+1)):
        z *= i
    return(x//(y*z))
    

#Complete Q1b below
def nChooseK_recursive(n,k):
    if k == 0:
        return 1
    if n == k:
        return 1
    else:
        return nChooseK_recursive(n-1, k-1) + nChooseK_recursive(n-1, k)
'''
Space for your thought in Question 1c

The recursive function has a maximum recursive depth of around 1000. In my case, n or k cannot be greater than 992, or the
recursive depth will be exceeded and the interpreter returns an error.

On the other hand, the iterative function nChooseK can go beyond that. Its upper bound for the largest value it can churn 
out in one minute is n = 200000, and it returns 19999900000.

Also, a comparison of their run times suggest that the recursive function has an exponential run time, since each call to the function will call
2 other functions. The iterative function, on the other hand, has a run time of O(n). Thus, the iterative function nChooseK is better than the
recursive function nChooseK_recursive in terms of the largest values permitted for n and k as well as its runtime.

'''

    
#Complete Q2 below
def monte_carlo_pi(n):
    r, stor, circ = 1, n, 0 
    while(n > 0):
        x, y = uniform(-r, r), uniform(-r, r)
        dist = sqrt(x**2 + y**2)
        if dist <= r:
            circ += 1
        n -= 1
    p = circ/stor
    return(4.0*p)
        
def monte_carlo_pi_int(n):
    r, stor, circ = 10000000000, n, 0
    while(n > 0):
        x, y = randint(-r, r), randint(-r, r)
        dist = sqrt(x**2 + y**2)
        if dist <= r:
            circ += 1
        n -= 1
    p = circ/stor
    return(4*p)


print(monte_carlo_pi(10))
print(monte_carlo_pi(100))
print(monte_carlo_pi(1000))
print(monte_carlo_pi(10000))
print(monte_carlo_pi(100000))
print(monte_carlo_pi(1000000))
print(monte_carlo_pi(10000000))
'''
print('yo')
print(monte_carlo_pi_int(10))
print(monte_carlo_pi_int(100))
print(monte_carlo_pi_int(1000))
print(monte_carlo_pi_int(10000))
print(monte_carlo_pi_int(100000))
print(monte_carlo_pi_int(1000000))

if __name__ == '__main__':
    #print(nChooseK(200000, 2))  
    #print(nChooseK_recursive(990,2))
'''